// Nh·∫≠p c√°c module c·∫ßn thi·∫øt t·ª´ Discord.js
const { Client, GatewayIntentBits, SlashCommandBuilder, REST, Routes, EmbedBuilder } = require('discord.js');

// C·∫•u h√¨nh t·∫≠p trung (token ƒë∆∞·ª£c hardcode t·∫°i ƒë√¢y v√† d√πng ·ªü m·ªçi n∆°i)
const config = {
  token: 'tokenbot', // Token hardcode
};

// Kh·ªüi t·∫°o client Discord
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers,
  ],
});

// C·∫•u h√¨nh h√¨nh ·∫£nh theo t·ª∑ l·ªá ph·∫ßn trƒÉm
const imageConfig = {
  totinh: {
    low: 'https://media.tenor.com/iXq_oSpqtssAAAAM/sad-sad-face.gif', // 1-20% (kh√¥ng h·ª£p)
    medium: 'https://images7.memedroid.com/images/UPLOADED814/59b74483cca34.jpeg', // 21-50% (c·∫ßn c·ªë g·∫Øng)
    high: 'https://encrypted-tbn0.gstatic.com/images?q=tbn9GcS6Qiuxnthgi3BiX6reEFiWHAQrpSTJZ6Mthw&s', // 51-80% (kh√° h·ª£p)
    veryHigh: 'https://encrypted-tbn0.gstatic.com/images?q=tbn9GcTYmTUfxWp4Mg6Q8-dFBx9GB0Nl4TLaNM7l7w&s', // 81-100% (r·∫•t h·ª£p)
  },
  ghepdoi: {
    low: 'https://media.tenor.com/iXq_oSpqtssAAAAM/sad-sad-face.gif', // 1-20% (kh√¥ng h·ª£p)
    medium: 'https://images7.memedroid.com/images/UPLOADED814/59b74483cca34.jpeg', // 21-50% (c·∫ßn c·ªë g·∫Øng)
    high: 'https://encrypted-tbn0.gstatic.com/images?q=tbn9GcS6Qiuxnthgi3BiX6reEFiWHAQrpSTJZ6Mthw&s', // 51-80% (kh√° h·ª£p)
    veryHigh: 'https://encrypted-tbn0.gstatic.com/images?q=tbn9GcTYmTUfxWp4Mg6Q8-dFBx9GB0Nl4TLaNM7l7w&s', // 81-100% (r·∫•t h·ª£p)
  },
  howgay: {
    low: 'https://encrypted-tbn0.gstatic.com/images?q=tbn9GcRLwl_y_y6T-4Qaf2iq7iARbe_tNTIAsEhUpA&s', // 1-20% (th·∫≥ng)
    medium: 'https://64.media.tumblr.com/f298e1d3d548b188e6ba500611bb4990/tumblr_mfdgiqmZxx1rqcu9eo1_500.jpg', // 21-50% (h∆°i cong)
    high: 'https://i.imgflip.com/1q8rdu.jpg?a483528', // 51-80% (kh√° gay)
    veryHigh: 'https://pbs.twimg.com/media/E7GHBjKWQAEMdmm.jpg', // 81-100% (r·∫•t gay)
  },
  haihuoc: [
    'https://images7.memedroid.com/images/UPLOADED765/5a6cf7cb08199.jpeg', // Meme v·ªÅ Wi-Fi
    'https://encrypted-tbn0.gstatic.com/images?q=tbn9GcTVIWGMBmjVFII2bo4JndrRaM527YI84ILzQQ&s', // Meme v·ªÅ tr√† s·ªØa
    'https://encrypted-tbn0.gstatic.com/images?q=tbn9GcQCp39g7UkyMdYKuziwYIW72qGYNJ_dCQCoMg&s', // Meme h√†i h∆∞·ªõc
  ],
  dance: [
    'https://media.tenor.com/YL8KBcr0Am4AAAAe/dancing-lit.png', // Nh·∫£y m√∫a
    'https://media.tenor.com/9xx5jJaHPpIAAAAM/fat-guy.gif', // Nh·∫£y vui nh·ªôn
    'https://media.tenor.com/S634LoO_WJ8AAAAM/remymane.gif', // Nh·∫£y d·ªÖ th∆∞∆°ng
  ],
  game: {
    guess: 'https://i.pinimg.com/564x/8r/9s/0t/8r9s0t1u2v3w4x5y6z7a.jpg', // H√¨nh ·∫£nh s·ªë ng·∫´u nhi√™n
    taixiu: 'https://i.pinimg.com/564x/9s/0t/1u/9s0t1u2v3w4x5y6z7a8b.jpg', // H√¨nh ·∫£nh x√∫c x·∫Øc
    trivia: [
      'https://i.pinimg.com/564x/0t/1u/2v/0t1u2v3w4x5y6z7a8b9c.jpg', // H√¨nh ·∫£nh m√®o
      'https://i.pinimg.com/564x/1u/2v/3w/1u2v3w4x5y6z7a8b9c0d.jpg', // H√¨nh ·∫£nh d√¢y thun
      'https://i.pinimg.com/564x/2v/3w/4x/2v3w4x5y6z7a8b9c0d1e.jpg', // H√¨nh ·∫£nh kh√¥ng kh√≠
    ],
    rps: 'https://i.pinimg.com/564x/3w/4x/5y/3w4x5y6z7a8b9c0d1e2f.jpg', // H√¨nh ·∫£nh o·∫≥n t√π t√¨
    typing: [
      'https://i.pinimg.com/564x/4x/5y/6z/4x5y6z7a8b9c0d1e2f3g.jpg', // H√¨nh ·∫£nh b√†n ph√≠m
      'https://i.pinimg.com/564x/5y/6z/7a/5y6z7a8b9c0d1e2f3g4h.jpg', // H√¨nh ·∫£nh ƒëua g√µ
      'https://i.pinimg.com/564x/6z/7a/8b/6z7a8b9c0d1e2f3g4h5i.jpg', // H√¨nh ·∫£nh ƒë·ªông vi√™n
    ],
    win: 'https://i.imgflip.com/2dpztf.jpg', // H√¨nh ·∫£nh chi·∫øn th·∫Øng
    lose: 'https://media.tenor.com/0yYc6cK8cwQAAAAM/black-happy.gif', // H√¨nh ·∫£nh thua cu·ªôc
    timeout: 'https://media.tenor.com/QBFbmd3FTiIAAAAM/im-rich-smile.gif', // H√¨nh ·∫£nh h·∫øt th·ªùi gian
  },
};

// Danh s√°ch n·ªôi dung gi·∫£i tr√≠
const loveQuotes = [
  { quote: "Tao ƒë√©o h·ª©a cho m√†y c·∫£ th·∫ø gi·ªõi, nh∆∞ng tao th·ªÅ s·∫Ω nh√©t c√°i tr√°i tim th·ªëi tha c·ªßa tao v√†o m·ªìm m√†y ƒë·ªÉ y√™u th∆∞∆°ng v√† b·∫£o v·ªá c√°i ƒë·ªì ngu m√†y! üíï", color: "#FF69B4" },
  { quote: "Tr√°i tim tao nh∆∞ c√°i b√£i r√°c ch·∫øt ti·ªát cho ƒë·∫øn khi m√†y l·∫øt c√°i ƒë√≠t th·ªëi tha c·ªßa m√†y t·ªõi nh∆∞ c∆°n b√£o l≈© l√†m m·ªçi th·ª© n·ªü hoa, con ƒëƒ©! üå∏", color: "#FFB6C1" },
  { quote: "Con m·∫π m√†y, l·∫°nh v√£i l·ªìn ngo√†i n√†y, n√≥i y√™u tao ƒëi‚Äîtim tao ƒë·∫≠p th√¨nh th·ªãch nh∆∞ mu·ªën n·ªï m·∫π n√≥ r·ªìi, ƒë·ªì ngu! üíì", color: "#FF1493" },
  { quote: "Tao ngu to√°n v√£i, nh∆∞ng tao t√≠nh ƒë∆∞·ª£c t∆∞∆°ng lai tao s·∫Ω ƒë√® m√†y ra ƒë·ª• m·ªói ng√†y, con ƒëƒ© ngon! üíç", color: "#FF4500" },
  { quote: "M·ªói l·∫ßn m√†y c∆∞·ªùi, c·∫£ th·∫ø gi·ªõi ch√≥ m√° c·ªßa tao s√°ng l√™n‚Äîm√†y bi·∫øt m√†y ƒëang l√†m tao ƒëi√™n ti·∫øt kh√¥ng, con ƒëƒ© l·∫≥ng l∆°? ‚ú®", color: "#FFD700" },
];

const flirtyQuotes = [
  { quote: "√ä con ƒëƒ©, m√†y c√≥ b·∫£n ƒë·ªì kh√¥ng? Tao l·∫°c m·∫π n√≥ trong ƒë√¥i m·∫Øt d√¢m ƒë√£ng c·ªßa m√†y r·ªìi! üòò", color: "#FF69B4" },
  { quote: "Tr√°i tim tao tr·ªëng r·ªóng nh∆∞ c√°i l·ªìn m√†y‚Äîmu·ªën d·ªçn c√°i ƒë√≠t th·ªëi c·ªßa m√†y v√†o kh√¥ng? üíã", color: "#FF1493" },
  { quote: "Tao kh√¥ng h·ª©a cho m√†y c·∫£ th·∫ø gi·ªõi, nh∆∞ng tao h·ª©a s·∫Ω l√†m m√†y s∆∞·ªõng c·∫£ ƒë√™m nay, con ƒëƒ© th√®m ƒë·ª•! üòè", color: "#FF4500" },
  { quote: "M√†y l√† c√† ph√™ √†? ƒê√™m qua tao m·∫•t ng·ªß v√¨ nghƒ© ƒë·∫øn c√°i ƒë√≠t d√¢m c·ªßa m√†y, con ƒëƒ©! ‚òï‚ù§Ô∏è", color: "#FFB6C1" },
  { quote: "Tao kh√¥ng ph·∫£i th·ª£ ch·ª•p ·∫£nh, nh∆∞ng tao t∆∞·ªüng t∆∞·ª£ng ƒë∆∞·ª£c c·∫£nh tao ƒë·ª• m√†y trong m·ªôt c√¢u chuy·ªán t√¨nh ho√†n h·∫£o, con ƒëƒ© th√®m c·∫∑c! üì∏üíï", color: "#FFD700" },
];

const funnyQuotes = [
  { quote: "ƒê·ªùi nh∆∞ c√°i Wi-Fi, ƒë√©o bi·∫øt m√¨nh ƒëang ·ªü ƒë√¢u tr√™n c√°i thanh t√≠n hi·ªáu ch√≥ m√° ƒë√≥, ƒë·ªì ngu! üì∂" },
  { quote: "Ti·ªÅn kh√¥ng mua ƒë∆∞·ª£c h·∫°nh ph√∫c, nh∆∞ng mua ƒë∆∞·ª£c tr√† s·ªØa, m√† tr√† s·ªØa th√¨ g·∫ßn gi·ªëng h·∫°nh ph√∫c, ƒë·ªì ngh√®o ki·∫øt x√°c! üßã" },
  { quote: "M·∫∑t tao x·∫•u nh∆∞ c√°i l·ªìn, nh∆∞ng k·∫øt c·∫•u ƒë·∫πp, gi·ªëng nh∆∞ c√°i nh√† v·ªá sinh c√¥ng c·ªông v·∫≠y, ƒë·ªì ngu! üöΩ" },
];

const danceMoves = [
  { move: "üíÉ Nh·∫£y ƒëi·ªáu moonwalk nh∆∞ Michael Jackson, m∆∞·ª£t h∆°n c√°i ƒë√≠t th·ªëi c·ªßa m√†y c·∫£ ng√†n l·∫ßn, ƒë·ªì ngu! üíÉ" },
  { move: "üï∫ Quay v√≤ng v√≤ng nh∆∞ c√°i qu·∫°t tr·∫ßn, th·ªïi bay c·∫£ server, c√≤n m√†y th√¨ ng·ªìi ƒë√≥ ghen t·ªã nh∆∞ con ch√≥! üï∫" },
  { move: "üëØ Nh·∫£y ƒëi·ªáu g√† con, v·ª´a nh·∫£y v·ª´a k√™u c√∫c c√π cu, d·ªÖ th∆∞∆°ng v√£i l·ªìn nh∆∞ng m√†y v·∫´n l√† ƒë·ªì ngu! üëØ" },
];

// Danh s√°ch c√¢u ƒë·ªë vui
const triviaQuestions = [
  { question: "Con g√¨ k√™u 'meo meo' nh∆∞ng kh√¥ng ph·∫£i m√®o, ƒë·ªì ngu v√£i l·ªìn?", answer: "Con m√®o gi·∫£ v·ªù l√†m ch√≥, ƒë·ªì ngu nh∆∞ b√≤" },
  { question: "C√°i g√¨ c√†ng k√©o c√†ng d√†i, c√†ng th·∫£ c√†ng ng·∫Øn, ƒë·ªì bi·∫øn th√°i kh·ªën n·∫°n?", answer: "C√°i d√¢y thun, ƒë·ªì d√¢m d·ª•c b·ªánh ho·∫°n" },
  { question: "C√°i g√¨ trong su·ªët, kh√¥ng c·∫ßm ƒë∆∞·ª£c, nh∆∞ng ai c≈©ng c·∫ßn, ƒë·ªì ngu kh√¥ng n√£o?", answer: "Kh√¥ng kh√≠, ƒë·ªì ngu nh∆∞ ch√≥" },
];

// Danh s√°ch c√¢u ƒë·ªÉ ƒëua ch·ªØ
const typingChallenges = [
  { challenge: "G√µ c√¢u n√†y nhanh m·∫π ƒëi n·∫øu kh√¥ng mu·ªën b·ªã g·ªçi l√† ƒë·ªì ngu v√£i l·ªìn, con ƒëƒ© ch·∫≠m ch·∫°p!" },
  { challenge: "Ai g√µ nhanh h∆°n th√¨ th·∫Øng, m√†y s·∫µn s√†ng ch∆∞a, ƒë·ªì ngu nh∆∞ b√≤?" },
  { challenge: "C√¢u n√†y d√†i v√£i l·ªìn, nh∆∞ng m√†y l√†m ƒë∆∞·ª£c m√†, ƒë·ª´ng c√≥ ngu nh∆∞ ch√≥!" },
];

// Logic th√¥ng minh cho t·ª∑ l·ªá
const getCompatibilityMessage = (percentage) => {
  if (percentage <= 20) {
    return "Hai ƒë·ª©a m√†y kh√¥ng h·ª£p nhau v√£i l·ªìn, ƒëi t√¨m th·∫±ng kh√°c m√† ƒë·ª• ƒëi, ƒë·ªì ngu! üòÖ";
  } else if (percentage <= 50) {
    return "Hai ƒë·ª©a m√†y c·∫ßn c·ªë g·∫Øng th√™m ch√∫t n·ªØa kh√¥ng th√¨ ch·∫øt m·∫π n√≥ trong c√¥ ƒë∆°n, ƒë·ªì ngu! üí™";
  } else if (percentage <= 80) {
    return "Hai ƒë·ª©a m√†y kh√° h·ª£p nhau ƒë·∫•y, ti·∫øp t·ª•c ƒë·ª• nhau ƒëi, ƒë·ªì d√¢m ƒë√£ng! ‚ù§Ô∏è";
  } else {
    return "ƒê√π m√°, hai ƒë·ª©a m√†y sinh ra ƒë·ªÉ ƒë·ª• nhau, ch√∫c m·ª´ng c·∫∑p ƒë√¥i d√¢m ƒë√£ng! üíï";
  }
};

const getGayMessage = (percentage) => {
  if (percentage <= 20) {
    return "M√†y th·∫≥ng nh∆∞ c√°i th∆∞·ªõc k·∫ª, ch√°n v√£i l·ªìn, ƒë·ªì ngu! üìè";
  } else if (percentage <= 50) {
    return "M√†y h∆°i cong cong, nh∆∞ng v·∫´n l√† th·∫±ng th·∫≥ng ngu ng·ªëc, ƒë·ªì ƒë·∫ßn! üòè";
  } else if (percentage <= 80) {
    return "M√†y kh√° l√† gay, nh∆∞ng v·∫´n c√≤n ch√∫t th·∫≥ng ƒë·ªÉ gi·∫£ tr√¢n, ƒë·ªì b√≥ng gi·∫£ b·ªô! üåà";
  } else {
    return "M√†y gay v√£i l·ªìn, th·∫±ng b√≥ng th√®m c·∫∑c, t·ª± h√†o l√™n ƒëi, con ƒëƒ© c·∫ßu v·ªìng! üè≥Ô∏è‚Äçüåà";
  }
};

// H√†m ch·ªçn h√¨nh ·∫£nh d·ª±a tr√™n t·ª∑ l·ªá
const getImageByPercentage = (config, percentage) => {
  if (percentage <= 20) return config.low;
  if (percentage <= 50) return config.medium;
  if (percentage <= 80) return config.high;
  return config.veryHigh;
};

// Khi bot s·∫µn s√†ng
client.once('ready', async () => {
  console.log(`Bot ${client.user.tag} ƒë√£ online, l≈© ngu! ID: ${client.user.id}`);

  const commands = [
    new SlashCommandBuilder()
      .setName('totinh')
      .setDescription('G·ª≠i l·ªùi t·ªè t√¨nh cho con ƒëƒ© n√†o ƒë√≥')
      .addStringOption(option =>
        option.setName('style')
          .setDescription('Ch·ªçn phong c√°ch t·ªè t√¨nh, ƒë·ªì ngu')
          .setRequired(true)
          .addChoices(
            { name: 'L√£ng m·∫°n', value: 'romantic' },
            { name: 'G·ª£i c·∫£m', value: 'flirty' },
          ))
      .addUserOption(option =>
        option.setName('target')
          .setDescription('Con ƒëƒ© m√†y mu·ªën t·ªè t√¨nh')
          .setRequired(true)),
    new SlashCommandBuilder()
      .setName('haihuoc')
      .setDescription('G·ª≠i c√¢u n√≥i h√†i h∆∞·ªõc cho l≈© ngu c∆∞·ªùi'),
    new SlashCommandBuilder()
      .setName('ghepdoi')
      .setDescription('Gh√©p ƒë√¥i hai th·∫±ng ngu l·∫°i v·ªõi nhau')
      .addUserOption(option =>
        option.setName('person1')
          .setDescription('Th·∫±ng ngu th·ª© nh·∫•t')
          .setRequired(true))
      .addUserOption(option =>
        option.setName('person2')
          .setDescription('Th·∫±ng ngu th·ª© hai')
          .setRequired(true)),
    new SlashCommandBuilder()
      .setName('dance')
      .setDescription('Bot s·∫Ω nh·∫£y nh∆∞ th·∫±ng ƒëi√™n'),
    new SlashCommandBuilder()
      .setName('game')
      .setDescription('Ch∆°i m·ªôt mini-game ngu ng·ªëc')
      .addStringOption(option =>
        option.setName('type')
          .setDescription('Ch·ªçn lo·∫°i game, ƒë·ªì ngu')
          .setRequired(true)
          .addChoices(
            { name: 'ƒêo√°n s·ªë', value: 'guess' },
            { name: 'T√†i x·ªâu', value: 'taixiu' },
            { name: 'ƒê·ªë vui', value: 'trivia' },
            { name: 'O·∫≥n t√π t√¨', value: 'rps' },
            { name: 'ƒêua ch·ªØ', value: 'typing' },
          )),
    new SlashCommandBuilder()
      .setName('howgay')
      .setDescription('ƒêo m·ª©c ƒë·ªô gay c·ªßa th·∫±ng ngu n√†o ƒë√≥')
      .addUserOption(option =>
        option.setName('target')
          .setDescription('Th·∫±ng ngu m√†y mu·ªën ƒëo')
          .setRequired(true)),
  ].map(command => command.toJSON());

  const rest = new REST({ version: '10' }).setToken(config.token);

  try {
    console.log('ƒêang ƒë·ªìng b·ªô l·ªánh, l≈© ngu ch·ªù ƒëi...');
    await rest.put(
      Routes.applicationCommands(client.user.id),
      { body: commands },
    );
    console.log('ƒê√£ ƒë·ªìng b·ªô l·ªánh xong, c·∫£m ∆°n tao ƒëi, l≈© ngu!');
  } catch (error) {
    console.error(error);
  }
});

// X·ª≠ l√Ω slash commands
client.on('interactionCreate', async interaction => {
  if (!interaction.isCommand()) return;

  const { commandName, options } = interaction;

  if (commandName === 'totinh') {
    const style = options.getString('style');
    const target = options.getUser('target');
    let selectedQuote;

    if (style === 'romantic') {
      selectedQuote = loveQuotes[Math.floor(Math.random() * loveQuotes.length)];
    } else if (style === 'flirty') {
      selectedQuote = flirtyQuotes[Math.floor(Math.random() * flirtyQuotes.length)];
    }

    if (!selectedQuote) {
      await interaction.reply({
        content: 'ƒê√π m√°, m√†y ngu v√£i l·ªìn! Ch·ªçn "L√£ng m·∫°n" ho·∫∑c "G·ª£i c·∫£m" ƒëi, ƒë·ªì ngu!',
        ephemeral: true,
      });
      return;
    }

    const lovePercentage = Math.floor(Math.random() * 100) + 1;
    const compatibilityMessage = getCompatibilityMessage(lovePercentage);
    const image = getImageByPercentage(imageConfig.totinh, lovePercentage);

    const embed = new EmbedBuilder()
      .setTitle('üíò T·ªè T√¨nh Nh∆∞ Th·∫±ng ƒê√†n √îng, Con ƒêƒ©! üíò')
      .setDescription(`${target}, ${selectedQuote.quote}\n\n**T·ª∑ l·ªá h·ª£p nhau:** ${lovePercentage}%\n${compatibilityMessage}`)
      .setColor(selectedQuote.color)
      .setImage(image)
      .setFooter({ text: `G·ª≠i t·ª´ ${interaction.user.username}, th·∫±ng kh·ªën n·∫°n nh·∫•t server ‚ù§Ô∏è` })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });
  }

  if (commandName === 'haihuoc') {
    const randomIndex = Math.floor(Math.random() * funnyQuotes.length);
    const randomFunny = funnyQuotes[randomIndex];
    const image = imageConfig.haihuoc[randomIndex];

    const embed = new EmbedBuilder()
      .setTitle('üòÇ C√¢u N√≥i H√†i H∆∞·ªõc Cho L≈© Ngu C∆∞·ªùi üòÇ')
      .setDescription(randomFunny.quote)
      .setColor('#FFFF00')
      .setImage(image)
      .setFooter({ text: `G·ª≠i b·ªüi ${interaction.user.username}, th·∫±ng h·ªÅ ngu nh·∫•t server` })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });
  }

  if (commandName === 'ghepdoi') {
    const person1 = options.getUser('person1');
    const person2 = options.getUser('person2');

    if (person1.id === person2.id) {
      await interaction.reply({
        content: 'ƒê√π m√°, m√†y kh√¥ng gh√©p ƒë√¥i m·ªôt th·∫±ng ngu v·ªõi ch√≠nh n√≥ ƒë∆∞·ª£c, ƒë·ªì ngu v√£i l·ªìn! üòÖ',
        ephemeral: true,
      });
      return;
    }

    const lovePercentage = Math.floor(Math.random() * 100) + 1;
    const compatibilityMessage = getCompatibilityMessage(lovePercentage);
    const image = getImageByPercentage(imageConfig.ghepdoi, lovePercentage);

    const embed = new EmbedBuilder()
      .setTitle('üíû K·∫øt Qu·∫£ Gh√©p ƒê√¥i, L≈© ƒêƒ© D√¢m ƒê√£ng! üíû')
      .setDescription(`Ch√∫c m·ª´ng ${person1} v√† ${person2} ƒë√£ ƒë∆∞·ª£c gh√©p ƒë√¥i, l≈© d√¢m ƒë√£ng! ‚ù§Ô∏è\n**T·ª∑ l·ªá h·ª£p nhau:** ${lovePercentage}%\n${compatibilityMessage}`)
      .setColor(lovePercentage > 50 ? '#FF69B4' : '#FF4500')
      .setImage(image)
      .setFooter({ text: 'ƒê·ª´ng c√≥ l√†m h·ªèng chuy·ªán, l≈© ƒëƒ© th√®m ƒë·ª•! üíï' })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });
  }

  if (commandName === 'dance') {
    const randomIndex = Math.floor(Math.random() * danceMoves.length);
    const randomDance = danceMoves[randomIndex];
    const image = imageConfig.dance[randomIndex];

    const embed = new EmbedBuilder()
      .setTitle('üíÉ Nh·∫£y Nh∆∞ Th·∫±ng ƒêi√™n V√£i L·ªìn! üï∫')
      .setDescription(randomDance.move)
      .setColor('#00CED1')
      .setImage(image)
      .setFooter({ text: `Bi·ªÉu di·ªÖn b·ªüi ${interaction.user.username}, th·∫±ng ngu nh·∫£y d·ªü nh·∫•t server` })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });
  }

  if (commandName === 'howgay') {
    const target = options.getUser('target');
    const gayPercentage = Math.floor(Math.random() * 100) + 1;
    const gayMessage = getGayMessage(gayPercentage);
    const image = getImageByPercentage(imageConfig.howgay, gayPercentage);

    const embed = new EmbedBuilder()
      .setTitle('üåà M√†y Gay V√£i L·ªìn ƒê·∫øn ƒê√¢u, Th·∫±ng Ngu? üåà')
      .setDescription(`${target}, m·ª©c ƒë·ªô gay c·ªßa m√†y l√†: **${gayPercentage}%**\n${gayMessage}`)
      .setColor(gayPercentage > 50 ? '#FF69B4' : '#1E90FF')
      .setImage(image)
      .setFooter({ text: `ƒêo b·ªüi ${interaction.user.username}, th·∫±ng kh·ªën n·∫°n t√≤ m√≤ nh·∫•t server` })
      .setTimestamp();

    await interaction.reply({ embeds: [embed] });
  }

  if (commandName === 'game') {
    const gameType = options.getString('type');

    if (gameType === 'guess') {
      const secretNumber = Math.floor(Math.random() * 100) + 1;
      let attempts = 0;

      const embed = new EmbedBuilder()
        .setTitle('üé≤ Mini-Game: ƒêo√°n S·ªë, ƒê·ªì Ngu V√£i L·ªìn! üé≤')
        .setDescription('Tao ƒë√£ ch·ªçn m·ªôt s·ªë t·ª´ **1 ƒë·∫øn 100**. M√†y c√≥ 100 l∆∞·ª£t ƒë·ªÉ ƒëo√°n, ƒë·ªì ngu! G√µ s·ªë m√†y ƒëo√°n v√†o chat ƒëi!')
        .setColor('#1E90FF')
        .setImage(imageConfig.game.guess)
        .setFooter({ text: 'G√µ nhanh ƒëi, ƒë·ªì ngu ch·∫≠m ch·∫°p!' });

      await interaction.reply({ embeds: [embed] });

      const filter = m => m.author.id === interaction.user.id && !isNaN(m.content) && m.content >= 1 && m.content <= 100;
      const collector = interaction.channel.createMessageCollector({ filter, time: 60000 });

      collector.on('collect', async m => {
        attempts++;
        const guess = parseInt(m.content);

        if (guess === secretNumber) {
          const winEmbed = new EmbedBuilder()
            .setTitle('üéâ ƒê√π M√°, M√†y Th·∫Øng Th·∫≠t, Th·∫±ng Ngu May M·∫Øn! üéâ')
            .setDescription(`M√†y ƒëo√°n ƒë√∫ng s·ªë **${secretNumber}** sau **${attempts}** l∆∞·ª£t, ƒë·ªì ƒÉn may v√£i l·ªìn!`)
            .setColor('#32CD32')
            .setImage(imageConfig.game.win)
            .setTimestamp();
          await interaction.followUp({ embeds: [winEmbed] });
          collector.stop();
        } else if (guess < secretNumber) {
          await interaction.followUp('S·ªë m√†y ƒëo√°n **th·∫•p** v√£i l·ªìn! Th·ª≠ l·∫°i ƒëi, ƒë·ªì ngu! ‚¨ÜÔ∏è');
        } else {
          await interaction.followUp('S·ªë m√†y ƒëo√°n **cao** v√£i l·ªìn! Th·ª≠ l·∫°i ƒëi, ƒë·ªì ngu kh√¥ng n√£o! ‚¨áÔ∏è');
        }

        if (attempts >= 100) {
          const loseEmbed = new EmbedBuilder()
            .setTitle('üíî H·∫øt L∆∞·ª£t, M√†y Thua Nh∆∞ Ch√≥! üíî')
            .setDescription(`S·ªë ƒë√∫ng l√† **${secretNumber}**. L·∫ßn sau c·ªë l√™n, ƒë·ªì ngu nh∆∞ b√≤!`)
            .setColor('#FF0000')
            .setImage(imageConfig.game.lose)
            .setTimestamp();
          await interaction.followUp({ embeds: [loseEmbed] });
          collector.stop();
        }
      });

      collector.on('end', (collected, reason) => {
        if (reason === 'time') {
          const timeoutEmbed = new EmbedBuilder()
            .setTitle('‚è∞ H·∫øt Th·ªùi Gian, ƒê·ªì Ngu Ch·∫≠m Ch·∫°p!')
            .setDescription(`M√†y h·∫øt th·ªùi gian r·ªìi, ƒë·ªì ngu! S·ªë ƒë√∫ng l√† **${secretNumber}**.`)
            .setColor('#FF4500')
            .setImage(imageConfig.game.timeout)
            .setTimestamp();
          interaction.followUp({ embeds: [timeoutEmbed] });
        }
      });
    }

    if (gameType === 'taixiu') {
      const result = Math.random() < 0.5 ? 'T√†i' : 'X·ªâu';
      const embed = new EmbedBuilder()
        .setTitle('üé∞ T√†i X·ªâu, ƒê·ªì Nghi·ªán C·ªù B·∫°c! üé∞')
        .setDescription(`K·∫øt qu·∫£: **${result}** üé≤\nCh∆°i l·∫°i kh√¥ng, ƒë·ªì ngu th√®m c·ªù b·∫°c?`)
        .setColor(result === 'T√†i' ? '#FFD700' : '#FF4500')
        .setImage(imageConfig.game.taixiu)
        .setTimestamp();

      await interaction.reply({ embeds: [embed] });
    }

    if (gameType === 'trivia') {
      const randomIndex = Math.floor(Math.random() * triviaQuestions.length);
      const question = triviaQuestions[randomIndex];
      const image = imageConfig.game.trivia[randomIndex];

      const embed = new EmbedBuilder()
        .setTitle('üß† ƒê·ªë Vui, ƒê·ªì Ngu Kh√¥ng N√£o! üß†')
        .setDescription(`C√¢u h·ªèi: **${question.question}**\nM√†y c√≥ 30 gi√¢y ƒë·ªÉ tr·∫£ l·ªùi, ƒë·ªì ngu! G√µ c√¢u tr·∫£ l·ªùi v√†o chat ƒëi!`)
        .setColor('#FFA500')
        .setImage(image)
        .setFooter({ text: 'Suy nghƒ© ƒëi, ƒë·ªì ngu nh∆∞ b√≤!' });

      await interaction.reply({ embeds: [embed] });

      const filter = m => m.author.id === interaction.user.id;
      const collector = interaction.channel.createMessageCollector({ filter, time: 30000 });

      collector.on('collect', async m => {
        const userAnswer = m.content.toLowerCase();
        if (userAnswer === question.answer.toLowerCase()) {
          const winEmbed = new EmbedBuilder()
            .setTitle('üéâ ƒê√π M√°, M√†y ƒê√∫ng Th·∫≠t, ƒê·ªì Ngu May M·∫Øn! üéâ')
            .setDescription(`C√¢u tr·∫£ l·ªùi ƒë√∫ng l√†: **${question.answer}**! M√†y kh√¥ng ngu nh∆∞ tao nghƒ©! üß†`)
            .setColor('#32CD32')
            .setImage(imageConfig.game.win)
            .setTimestamp();
          await interaction.followUp({ embeds: [winEmbed] });
          collector.stop();
        } else {
          await interaction.followUp('Sai m·∫π r·ªìi, ƒë·ªì ngu! Th·ª≠ l·∫°i ƒëi, ƒë·ªì ngu kh√¥ng n√£o! ü§î');
        }
      });

      collector.on('end', (collected, reason) => {
        if (reason === 'time') {
          const timeoutEmbed = new EmbedBuilder()
            .setTitle('‚è∞ H·∫øt Th·ªùi Gian, ƒê·ªì Ngu Ch·∫≠m Ch·∫°p!')
            .setDescription(`C√¢u tr·∫£ l·ªùi ƒë√∫ng l√†: **${question.answer}**. L·∫ßn sau nhanh l√™n, ƒë·ªì ngu!`)
            .setColor('#FF4500')
            .setImage(imageConfig.game.timeout)
            .setTimestamp();
          interaction.followUp({ embeds: [timeoutEmbed] });
        }
      });
    }

    if (gameType === 'rps') {
      const choices = ['k√©o', 'b√∫a', 'bao'];
      const botChoice = choices[Math.floor(Math.random() * choices.length)];
      const embed = new EmbedBuilder()
        .setTitle('‚úÇÔ∏è O·∫≥n T√π T√¨, ƒê·ªì Ngu! ‚úÇÔ∏è')
        .setDescription('Ch·ªçn: **k√©o**, **b√∫a**, ho·∫∑c **bao**! M√†y c√≥ 15 gi√¢y, ƒë·ª´ng ngu m√† ch·ªçn sai, ƒë·ªì ngu!')
        .setColor('#1E90FF')
        .setImage(imageConfig.game.rps)
        .setFooter({ text: 'Nhanh m·∫π l√™n, ƒë·ªì ngu ch·∫≠m ch·∫°p!' });

      await interaction.reply({ embeds: [embed] });

      const filter = m => m.author.id === interaction.user.id && choices.includes(m.content.toLowerCase());
      const collector = interaction.channel.createMessageCollector({ filter, time: 15000 });

      collector.on('collect', async m => {
        const userChoice = m.content.toLowerCase();
        let result;

        if (userChoice === botChoice) {
          result = 'H√≤a m·∫π r·ªìi! C·∫£ hai c√πng ch·ªçn **' + botChoice + '**, ƒë·ªì ngu! üòÖ';
        } else if (
          (userChoice === 'k√©o' && botChoice === 'bao') ||
          (userChoice === 'b√∫a' && botChoice === 'k√©o') ||
          (userChoice === 'bao' && botChoice === 'b√∫a')
        ) {
          result = `M√†y th·∫Øng, ƒë·ªì ƒÉn may v√£i l·ªìn! M√†y ch·ªçn **${userChoice}**, tao ch·ªçn **${botChoice}**. üéâ`;
        } else {
          result = `M√†y thua, ƒë·ªì ngu! M√†y ch·ªçn **${userChoice}**, tao ch·ªçn **${botChoice}**. C√∫t m·∫π m√†y ƒëi! üò¢`;
        }

        const resultEmbed = new EmbedBuilder()
          .setTitle('‚úÇÔ∏è K·∫øt Qu·∫£ O·∫≥n T√π T√¨, ƒê·ªì Ngu! ‚úÇÔ∏è')
          .setDescription(result)
          .setColor(result.includes('th·∫Øng') ? '#32CD32' : result.includes('H√≤a') ? '#FFFF00' : '#FF4500')
          .setImage(result.includes('th·∫Øng') ? imageConfig.game.win : result.includes('H√≤a') ? imageConfig.game.rps : imageConfig.game.lose)
          .setTimestamp();
        await interaction.followUp({ embeds: [resultEmbed] });
        collector.stop();
      });

      collector.on('end', (collected, reason) => {
        if (reason === 'time') {
          const timeoutEmbed = new EmbedBuilder()
            .setTitle('‚è∞ H·∫øt Th·ªùi Gian, ƒê·ªì Ngu Ch·∫≠m Ch·∫°p!')
            .setDescription('M√†y kh√¥ng ch·ªçn k·ªãp, ƒë·ªì ngu! Tao ch·ªçn **' + botChoice + '**. Ch∆°i l·∫°i ƒëi, ƒë·ªì ngu!')
            .setColor('#FF4500')
            .setImage(imageConfig.game.timeout)
            .setTimestamp();
          interaction.followUp({ embeds: [timeoutEmbed] });
        }
      });
    }

    if (gameType === 'typing') {
      const randomIndex = Math.floor(Math.random() * typingChallenges.length);
      const challenge = typingChallenges[randomIndex];
      const image = imageConfig.game.typing[randomIndex];

      const embed = new EmbedBuilder()
        .setTitle('‚å®Ô∏è ƒêua Ch·ªØ, ƒê·ªì Ngu Ch·∫≠m Ch·∫°p! ‚å®Ô∏è')
        .setDescription(`G√µ c√¢u n√†y nhanh m·∫π ƒëi:\n**${challenge.challenge}**\nM√†y c√≥ 20 gi√¢y, ƒë·ª´ng ngu m√† l√†m sai, ƒë·ªì ngu!`)
        .setColor('#FF69B4')
        .setImage(image)
        .setFooter({ text: 'G√µ nhanh l√™n, ƒë·ªì ngu ch·∫≠m nh∆∞ r√πa!' });

      await interaction.reply({ embeds: [embed] });

      const startTime = Date.now();
      const filter = m => m.author.id === interaction.user.id && m.content === challenge.challenge;
      const collector = interaction.channel.createMessageCollector({ filter, time: 20000 });

      collector.on('collect', async m => {
        const endTime = Date.now();
        const timeTaken = (endTime - startTime) / 1000; // Th·ªùi gian t√≠nh b·∫±ng gi√¢y

        const winEmbed = new EmbedBuilder()
          .setTitle('üéâ ƒê√π M√°, M√†y Th·∫Øng Th·∫≠t, ƒê·ªì Ngu Ch·∫≠m Ch·∫°p! üéâ')
          .setDescription(`M√†y g√µ ƒë√∫ng c√¢u trong **${timeTaken} gi√¢y**! Kh√¥ng t·ªá cho m·ªôt th·∫±ng ngu! üöÄ`)
          .setColor('#32CD32')
          .setImage(imageConfig.game.win)
          .setTimestamp();
        await interaction.followUp({ embeds: [winEmbed] });
        collector.stop();
      });

      collector.on('end', (collected, reason) => {
        if (reason === 'time') {
          const timeoutEmbed = new EmbedBuilder()
            .setTitle('‚è∞ H·∫øt Th·ªùi Gian, ƒê·ªì Ngu Ch·∫≠m Ch·∫°p!')
            .setDescription('M√†y g√µ kh√¥ng k·ªãp, ƒë·ªì ngu! C·ªë l√™n l·∫ßn sau, ƒë·ªì ngu nh∆∞ b√≤! üòÖ')
            .setColor('#FF4500')
            .setImage(imageConfig.game.timeout)
            .setTimestamp();
          interaction.followUp({ embeds: [timeoutEmbed] });
        }
      });
    }
  }
});

// ƒêƒÉng nh·∫≠p bot b·∫±ng token t·ª´ config
client.login(config.token);
